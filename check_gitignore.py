#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ .gitignore
"""

import os
import subprocess
import sys

def run_command(cmd):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout.strip()
    except Exception as e:
        return False, str(e)

def check_gitignore():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ .gitignore"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ .gitignore")
    print("=" * 50)
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    test_files = [
        "deep_sort_pytorch/configs/deep_sort.yaml",
        "deep_sort_pytorch/deep_sort/deep/checkpoint/resnet18-5c106cde.pth",
        "deep_sort_pytorch/detector/YOLOv3/weight/yolov3.weights",
        "deep_sort_pytorch/detector/YOLOv5/yolov5s.pt",
        "output/results.avi",
        "*.log",
        "temp/",
        "results/"
    ]
    
    print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏:")
    for file_path in test_files:
        success, output = run_command(f'git check-ignore "{file_path}"')
        if success and output:
            print(f"‚úÖ {file_path} - –ò–ì–ù–û–†–ò–†–£–ï–¢–°–Ø")
        elif success:
            print(f"‚ùå {file_path} - –ù–ï –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
        else:
            print(f"‚ö†Ô∏è {file_path} - –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {output}")
    
    print("\n" + "=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Git
    print("üìä –°—Ç–∞—Ç—É—Å Git:")
    success, output = run_command("git status --porcelain")
    if success:
        if output:
            print("üìù –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:")
            for line in output.split('\n'):
                if line.strip():
                    print(f"   {line}")
        else:
            print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —á–∏—Å—Ç")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {output}")

def show_gitignore_rules():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ .gitignore"""
    print("\nüìÑ –ü—Ä–∞–≤–∏–ª–∞ .gitignore:")
    print("=" * 50)
    
    if os.path.exists('.gitignore'):
        with open('.gitignore', 'r', encoding='utf-8') as f:
            content = f.read()
            lines = content.split('\n')
            
            for i, line in enumerate(lines, 1):
                line = line.strip()
                if line and not line.startswith('#'):
                    print(f"{i:3d}: {line}")
                elif line.startswith('#'):
                    print(f"{i:3d}: {line}")
    else:
        print("‚ùå –§–∞–π–ª .gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Git –¥–ª—è DeepSORT")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    if not os.path.exists('.git'):
        print("‚ùå –≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        return
    
    check_gitignore()
    show_gitignore_rules()
    
    print("\n" + "=" * 60)
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –í—Å–µ —Ñ–∞–π–ª—ã DeepSORT –¥–æ–ª–∂–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
    print("2. –í–µ—Å–∞ –º–æ–¥–µ–ª–µ–π (*.pt, *.pth, *.weights) –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å –≤ Git")
    print("3. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (*.yaml) –¥–æ–ª–∂–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
    print("4. –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
    
    print("\nüìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print("- –°–º. —Ñ–∞–π–ª DEEPSORT_SETUP.md –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ")
    print("- –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: deep_sort_pytorch/configs/deep_sort_example.yaml")

if __name__ == "__main__":
    main() 